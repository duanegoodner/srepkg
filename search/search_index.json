{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the srepkg documentation","text":"<p>srepkg is a Python package that wraps an isolation layer around other Python packages.</p>"},{"location":"#description","title":"Description","text":"<p>When a package wrapped in an isolation layer by srepkg is installed in an active, pre-existing Python environment: - The original package plus its dependencies are installed in a new, automatically created virtual environment. - A dependency-free \"access\" package installed in the pre-existing environment contains a controller module capable of making calls to the Python interpreter in the newly created environment. - This package structure ensures that none of the original package's dependencies conflict with packages in the pre-existing environment but still exposes the original package\u2019s CL to the pre-existing environment. </p>"},{"location":"#typical-use-cases","title":"Typical Use Cases","text":""},{"location":"#for-package-distributors","title":"For Package Distributors","text":"<ul> <li>srepkg can be useful if you are sharing a Python command line application, and you want to be certain that users can install and run it without worrying about dependency conflicts. </li> <li>Wrapping a CL package with srepkg prior to sharing the package with other users will ensure that wherever the package is installed, it does not introduce dependency conflicts into a user's existing Python environment \u2014 even if the user knows nothing about managing Python environments.</li> </ul>"},{"location":"#for-package-users","title":"For Package Users","text":"<ul> <li>Any existing CL package obtained from Python Packaging Index (PyPI) or GitHub can be wrapped with srepkg prior to installation.</li> <li>If you want the original package commands to be accessible from a single environment (that is distinct from the isolated environment where the original package is installed), then srepkg is likely a good option.</li> <li>However, if you want the isolated package's command interface to be available globally and/or want a much more mature isolation tool, then pipx is likely a better choice.</li> </ul>"},{"location":"compare_with_pipx/","title":"Comparing with a similar tool: pipx","text":"<p>srepkg is in many ways similar to the widely used tool pipx which also allows users to install a Python package in an isolated environment and then access its command line tool(s) from another environment. Key differences between srepkg and pipx include:</p> <ul> <li> <p>The actions that ensure isolation via pipx are taken by the user at the time of package installation. With srepkg, source code is wrapped in an isolating layer prior to installation, and the re-packaged application is automatically placed in its own environment during installation. </p> </li> <li> <p>The CLI of a package that has been re-packaged by srepkg accessible from an environment containing its access package. pipx allows global access to isolated command line applications. </p> </li> <li> <p>pipx is more mature and feature-rich than srepkg. If you have control of the package installation process, pipx will likely be more useful than srepkg. However, if you are distributing but not installing a Python CLI app and want to be certain the app is always installed into an isolated environment regardless what happens at install time, consider using srepkg.</p> </li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#demo-1-repackaging-a-local-package-that-depends-on-old-version-of-numpy","title":"Demo #1: Repackaging a local package that depends on old version of numpy","text":"<p>The following demo shows how we take an original package that has a dependency conflict what's already installed in an active Python environment, re-package with srepkg, install the re-packaged version, and access the original package's CLI from the active environment, without experiencing any dependency conflict.</p>"},{"location":"examples/#environment-setup","title":"Environment Setup","text":"<p>We will be using some test files from the srepkg repository, so instead of installing from PyPI, we will just clone the srepkg repo and install from there</p> <pre><code>$ conda create -n srepkg_oldmath_test python=3.10\n$ conda activate srepkg_oldmath_test\n$ git clone https://github.com/duanegoodner/srepkg\n$ cd srepkg\n$ pip install .\n</code></pre> <p>Then, let's install a version of numpy that is relatively new (as of Feb. 2025).</p> <pre><code>$ pip install numpy==2.2.2\n</code></pre> <p>Later on, we will use the presence of this current numpy version to help illustrate the absence of dependency conflicts.</p>"},{"location":"examples/#repackage-oldmath-as-oldmathsrepkg","title":"Repackage oldmath as oldmathsrepkg","text":"<p>Next, we will re-package a simple local Python package oldmath with its source files located <code>./test/demos/oldmath/</code>. oldmath depends on numpy 1.26.4.</p> <pre><code>$ srepkg test/demos/oldmath/\n\n\u2705 Building original package wheel from source code\n\u2705 Creating virtual env\n    Virtual env created with the following pypa packages installed:\n    \u2022 pip==25.0.1\n    \u2022 setuptools==75.8.0\n    \u2022 wheel==0.45.1\n\u2705 Installing oldmath-0.1.0-py3-none-any.whl in virtual env\n\u2705 Building srepkg wheel\n    oldmathsrepkg wheel saved as: /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0-py3-none-any.whl\n\u2705 Building srepkg sdist\n    oldmathsrepkg sdist saved as: /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0.tar.gz\n\noldmathsrepkg can be installed using either of the following commands:\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0-py3-none-any.whl\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0.tar.gz\nUpon installation, oldmathsrepkg will provide access to the following command line entry points: \n    \u2022 oldmath\n</code></pre> <p>The repackaged version of oldmath is called oldmathsrepkg, and it has been built into both <code>wheel</code> and <code>sdist</code> distributions.</p> <p>Note</p> <p>The <code>-n</code> option can be used to assign a custom name to the repackaged package and distributions.</p>"},{"location":"examples/#install-and-test-oldmathsrepkg","title":"Install and test oldmathsrepkg","text":"<p>Next, install oldmathsrepkg from the newly created wheel:</p> <pre><code>$ pip install ./srepkg_dists/oldmathsrepkg-0.1.0-py3-none-any.whl\n</code></pre> <p>Now, we can get some info about the <code>oldmath</code> command:</p> <pre><code>$ oldmath --help\n\nusage: oldmath [-h] factor\n\nMultiplies the numpy array [1 2 3] by a user-provided integer. Displays the resulting array as well as the version of numpy used.\n\npositional arguments:\n  factor      An integer that numpy array [1 2 3] will be multiplied by\n\noptions:\n  -h, --help  show this help message and exit\n</code></pre> <p>Next, we run:</p> <pre><code>$ oldmath 2025\n\n2025 * [1 2 3] = [2025 4050 6075]\nnumpy version used by this program = 1.26.4\n</code></pre>"},{"location":"examples/#confirm-absence-of-dependency-conflicts","title":"Confirm absence of dependency conflicts","text":"<p>Double-check the version of numpy that's installed in our active Python environment:</p> <pre><code>$ pip freeze | grep numpy\n\nnumpy==2.2.2\n</code></pre> <p>Finally, confirm that we do not have any dependency conflicts:</p> <pre><code>$ pip check\n\nNo broken requirements found.\n</code></pre> <p>The key thing to note is that oldmath, which we can access from the active Python environment uses numpy 1.26.4, but we still have numpy 2.2.2 installed the active environment.</p>"},{"location":"examples/#distribute-oldmathsrepkg-with-confidence-that-it-will-not-break-environments","title":"Distribute oldmathsrepkg with confidence that it will not break environments","text":"<p>We can now send the oldmathsrepkg wheel and/or sdist (saved under <code>./srepkg_dists</code>) to colleagues, knowing that install it will not cause problems in their Python environment, even if they are using a current version of <code>numpy</code> and do not know much / anything about Python dependencies and environments.</p>"},{"location":"examples/#demo-2-re-package-a-distribution-obtained-from-pypi","title":"Demo #2: Re-package a distribution obtained from PyPI","text":"<p>We can re-package the latest version of scrape available on the PyPI using the following:</p> <pre><code>$ srepkg scrape\n\n\u2705 Retrieving scrape from Python Packaging Index\n    Downloaded files:\n    \u2022 scrape-0.11.3-py3-none-any.whl\n\u2705 Creating virtual env\n    Virtual env created with the following pypa packages installed:\n    \u2022 pip==25.0.1\n    \u2022 setuptools==75.8.0\n    \u2022 wheel==0.45.1\n\u2705 Installing scrape-0.11.3-py3-none-any.whl in virtual env\n\u2705 Building srepkg wheel\n    scrapesrepkg wheel saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n\u2705 Building srepkg sdist\n    scrapesrepkg sdist saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\n\nscrapesrepkg can be installed using either of the following commands:\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\nUpon installation, scrapesrepkg will provide access to the following command line entry points: \n    \u2022 scrape\n</code></pre> <p>We can then install scrapesrepkg, and try using it to scrape http://example.com/:</p> <pre><code>$ pip install pip install srepkg_dists/scrapesrepkg-0.11.3-cp310-abi3-linux_x86_64.whl\n\nProcessing ./srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\nInstalling collected packages: scrapesrepkg\nSuccessfully installed scrapesrepkg-0.11.3\n\n$ scrape http://example.com/ -pt\n\nFailed to enable cache: No module named 'requests_cache'\nExample Domain\nExample Domain\nThis domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.\nMore information...\n</code></pre> <p>If we wanted to re-package a specific version (e.g.<code>0.11.0</code>) from PyPI we could do this:</p> <pre><code>$ srepkg scrape -r 0.11.0\n</code></pre>"},{"location":"examples/#demo-3-re-package-a-distribution-obtained-from-github","title":"Demo #3: Re-package a distribution obtained from GitHub","text":"<p>We can also re-package using a GitHub repo as the original source:</p> <pre><code>srepkg https://github.com/huntrar/scrape      \n\u2705 Cloning https://github.com/huntrar/scrape into temporary directory\n\u2705 Building original package wheel from source code\n\u2705 Creating virtual env\n    Virtual env created with the following pypa packages installed:\n    \u2022 pip==25.0.1\n    \u2022 setuptools==75.8.0\n    \u2022 wheel==0.45.1\n\u2705 Installing scrape-0.11.3-py3-none-any.whl in virtual env\n\u2705 Building srepkg wheel\n    scrapesrepkg wheel saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n\u2705 Building srepkg sdist\n    scrapesrepkg sdist saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\n\nscrapesrepkg can be installed using either of the following commands:\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\nUpon installation, scrapesrepkg will provide access to the following command line entry points: \n    \u2022 scrape\n</code></pre> <p>If we want to re-package a specific commit from the scrape GitHub repo, we can do this:</p> <pre><code>$ srepkg https://github.com/huntrar/scrape -g 1dfd98bb0a308ef2a45b1e5dd136c38b17c27bc7\n</code></pre> <p>If we want to re-package a specific release or tag, we would do this:</p> <pre><code>$ srepkg https://github.com/huntrar/scrape -g 0.11.2 \n</code></pre>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#requirements","title":"Requirements","text":"<ul> <li>Python version 3.10 or higher</li> <li>For compatibility with srepkg, and existing package must:</li> <li>Be installable via pip</li> <li>Have command line entry point(s) specified in either one the <code>[project.scripts]</code> section of a <code>pyproject.toml</code> (preferred), the <code>[options.entry_points]</code> section of a  <code>setup.cfg</code>, or the <code>entry_points</code> arguments passed to <code>setup()</code> in a <code>setupy.py</code> file.</li> <li>Optional: <code>miniconda</code> or <code>conda</code> if you want to exactly follow the examples in the documentation.</li> </ul>"},{"location":"getting_started/#installing","title":"Installing","text":"<pre><code>pip install srepkg\n</code></pre>"},{"location":"getting_started/#command-line-help","title":"Command Line Help","text":"<pre><code>srepkg --help\n</code></pre>"},{"location":"getting_started/#simple-demo-with-srepkg-in-a-fresh-conda-environment","title":"Simple Demo with srepkg in a fresh conda environment","text":"<pre><code># Create and activate a new conda environment for testing\nconda create -n srepkg_test python=3.11\nconda activate srepkg_test\n\n# Install srepkg from PyPI\npip install srepkg\n\n# Re-package a version of black, obtained from PyPI\nsrepkg black -r 25.1.0  # creates re-package wheel and sdist under ./srepkg_dists\n\n# install our re-packaged wheel\npip install ./srepkg_dists/blacksrepkg-25.1.0-py3-none-any.whl\n\n# Confirm blacksrepkg is installed and that black is NOT installed in our conda env\nconda list | grep black\n# Output:\n# blacksrepkg               25.1.0                   pypi_0    pypi\n\n# Check if any of black's dependencies are installed in our conda environment\nonda list | grep \"click\\|\\\nmypy_extensions\\|\\\npackaging\\|\\\npathspec\\|\\\nplatformdirs\\|\\\ntomli\\|\\\ntyping_extensions\"\n\n# Output:\n# packaging                 24.2                     pypi_0    pypi\n\n# Note: 'packaging' is installed because it is a dependency of 'srepkg'.\n# No other package that black depends on is in our environment.\n\n# Confirm that we have access to the black CLI\nblack -c \"def foo():print('hello,world')\"\n# Output:\n# def foo():\n#    print(\"hello,world\")\n</code></pre>"}]}