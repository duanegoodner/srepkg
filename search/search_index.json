{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Solo Repackage (srepkg) Documentation Site","text":"<p><code>srepkg</code> is a Python package that wraps other Python packages with an isolation layer, ensuring installation in an isolated virtual environment while preserving access to the original package's command-line interface in an external environment. </p>"},{"location":"#availability","title":"\ud83d\udce6 Availability","text":"<p>srepkg is available on PyPI and GitHub.</p>"},{"location":"#description","title":"\ud83d\udcd6 Description","text":"<p>When a package wrapped in an isolation layer by srepkg is installed in an active, pre-existing Python environment:</p> <ul> <li>The original package plus its dependencies are installed in a new, automatically created virtual environment.</li> <li>A dependency-free \"access\" package installed in the pre-existing environment contains a controller module capable of making calls to the Python interpreter in the newly created environment.</li> <li>This enivronment and package structure exposes the original package\u2019s CL to the pre-existing environmen while ensuring that none of the original package's dependencies conflict with packages in the pre-existing environment.</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"#for-package-distributors","title":"For Package Distributors","text":"<ul> <li>srepkg can be useful if you are sharing a Python command line application, and you want to be certain that users can install and run it without worrying about dependency conflicts. </li> <li>Wrapping a CL package with srepkg prior to sharing the package with other users will ensure that wherever the package is installed, it does not introduce dependency conflicts into a user's existing Python environment \u2014 even if the user knows nothing about managing Python environments.</li> </ul>"},{"location":"#for-package-users","title":"For Package Users","text":"<ul> <li>Any existing CL package obtained from Python Packaging Index (PyPI) or GitHub can be wrapped with srepkg prior to installation.</li> <li>If you want the original package commands to be accessible from a single environment (that is distinct from the isolated environment where the original package is installed), then srepkg is likely a good option.</li> <li>However, if you want the isolated package's command interface to be available globally and/or want a much more mature isolation tool, then pipx is likely a better choice.</li> </ul>"},{"location":"compare_with_pipx/","title":"\u2696\ufe0f Comparing with a similar tool: pipx","text":"<p>srepkg is in many ways similar to the widely used tool pipx which also allows users to install a Python package in an isolated environment and then access its command line tool(s) from another environment. Key differences between srepkg and pipx include:</p> <p>\ud83c\udf92 Responsibility Burden: The actions that ensure isolation via pipx are taken by the user at the time of package installation. With srepkg, a package distributor and/or user wraps a package in an isolating layer prior to installation.</p> <p>\ud83d\udd0c CLI Access Model: The CLI of a package that has been re-packaged by srepkg accessible from an environment containing its access package. pipx allows global access to isolated command line applications. </p> <p>\u2753 Which Isolation Tool to Choose: Since pipx is more mature and feature-rich than srepkg, if you have control of the package installation process, pipx will likely be more useful than srepkg. However, if you are distributing but not installing a Python CLI app and want to be certain the app is always installed into an isolated environment regardless what happens at install time, consider using srepkg.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#environment-setup","title":"Environment Setup","text":"<p>Some of the examples on this page rely on files from the  <code>test/</code> directory of the srepkg repo. Files from <code>test/</code> are not included when installing PyPI, so we will create a fresh Conda environment and install srepkg there using a cloned GitHub repo as the source.</p> <pre><code>conda create -n srepkg_tests=3.10\nconda activate srepkg_tests\ngit clone https://github.com/duanegoodner/srepkg\ncd srepkg\npip install .\n</code></pre>"},{"location":"examples/#example-1-using-srepkg-to-avoid-a-dependency-conflict","title":"Example #1: Using srepkg to Avoid a Dependency Conflict","text":"<p>For this example, we will use two local packages located under <code>./test/demos/</code> of the srepkg repo: oldmath at <code>./test/demos/oldmath</code> and newmath at <code>./test/demos/newmath</code>.</p> <p>Here is the content of the <code>pyproject.toml</code> for oldmath: <pre><code># ./test/demos/oldmath/pyproject.toml\n\n[build-system]\nrequires = [\"setuptools&gt;=42\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"oldmath\"\nversion = \"0.1.0\"\n\ndependencies = [\"numpy&lt;=1.26.4\"]\n\n[tool.setuptools]\npackage-dir = {\"\" = \"src\"}\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n\n[project.scripts]\noldmath = \"oldmath.app:run\"\n</code></pre> And here is the <code>pyproject.toml</code> for newmath: <pre><code># ./test/demos/newmath/pyproject.toml\n\n[build-system]\nrequires = [\"setuptools&gt;=42\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"newmath\"\nversion = \"0.1.0\"\n\ndependencies = [\"numpy&gt;=2.0.0\"]\n\n[tool.setuptools]\npackage-dir = {\"\" = \"src\"}\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n</code></pre></p> <p>oldmath has a command-line entry point named <code>oldmath</code>. newmath contains module <code>newmath.array_addition</code>. Since oldmath depends on numpy&lt;=1.26.4, and newmath depends on numpy&gt;=2.0.0, installing both packages in the same environment will result in a dependency conflict.</p> <p>We can avoid this conflict and still have access to the <code>oldmath</code> command and the <code>newmath.array_addition</code> module in the same Python environment if use srepkg to re-package oldmath, and install this re-packaged distribution and a <code>newmath</code> in the same environment.</p>"},{"location":"examples/#repackage-the-package-that-has-a-command-line-entry-point","title":"Repackage the Package that has a Command Line Entry Point","text":"<p>First, use srepkg to re-package oldmath by running: <pre><code>srepkg test/demos/oldmath/\n</code></pre> The output should look like this: <pre><code>\u2705 Building original package wheel from source code\n\u2705 Creating virtual env\n    Virtual env created with the following pypa packages installed:\n    \u2022 pip==25.0.1\n    \u2022 setuptools==75.8.0\n    \u2022 wheel==0.45.1\n\u2705 Installing oldmath-0.1.0-py3-none-any.whl in virtual env\n\u2705 Building srepkg wheel\n    oldmathsrepkg wheel saved as: /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0-py3-none-any.whl\n\u2705 Building srepkg sdist\n    oldmathsrepkg sdist saved as: /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0.tar.gz\n\noldmathsrepkg can be installed using either of the following commands:\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0-py3-none-any.whl\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/oldmathsrepkg-0.1.0.tar.gz\nUpon installation, oldmathsrepkg will provide access to the following command line entry points: \n    \u2022 oldmath\n</code></pre> The repackaged version of oldmath is called oldmathsrepkg, and it has been built into both <code>wheel</code> and <code>sdist</code> distributions located under <code>./srepkg_distributions</code>.</p>"},{"location":"examples/#install-newmath-and-re-packaged-version-of-oldmath-in-same-environment","title":"Install newmath and Re-packaged Version of oldmath in same Environment","text":"<p>Next, install oldmathsrepkg from the newly created wheel:</p> <pre><code>pip install ./srepkg_dists/oldmathsrepkg-0.1.0-py3-none-any.whl\n</code></pre> <p>Then, install the regular newmath package: <pre><code>pip install ./test/demos/newmath/\n</code></pre></p>"},{"location":"examples/#check-version-of-potentially-conflicting-dependency","title":"Check Version of Potentially-Conflicting Dependency","text":"<p>We can check the version of numpy that has been installed (as a dependency of newmath) by running: <pre><code>conda list | grep numpy \n</code></pre> The output should be similar to: <pre><code>numpy                     2.2.3                    pypi_0    pypi\n</code></pre> numpy 2.2.3 satisfies the newmath requirement <code>numpy&gt;=2.0.0</code> but does not satisfy the oldmath requirement <code>numpy&lt;=1.26.4</code>.</p>"},{"location":"examples/#use-the-command-line-interface-exposed-by-re-packaged-distribution","title":"Use the Command-Line Interface Exposed by Re-packaged Distribution","text":"<p>With oldmathsrepkg installed, we can use the oldmath command-line interface. </p> <p>First, run: <pre><code>oldmath --help\n</code></pre> The output with the above <code>--help</code> option is: <pre><code>usage: oldmath [-h] factor\n\nMultiplies the numpy array [1 2 3] by a user-provided integer.\nDisplays the resulting array as well as the version of numpy used.\n\npositional arguments:\n  factor      An integer that numpy array [1 2 3] will be multiplied by\n\noptions:\n  -h, --help  show this help message and exit\n</code></pre> Then use the <code>oldmath</code> command to do some math. Running <pre><code>oldmath 2025\n</code></pre> gives: <pre><code>2025 * [1 2 3] = [2025 4050 6075]\nnumpy version used by this program = 1.26.4\n</code></pre></p>"},{"location":"examples/#confirm-absence-of-dependency-conflicts","title":"Confirm Absence of Dependency Conflicts","text":"<p>Finally, confirm that we do not have any dependency conflicts: <pre><code>$ pip check\n\nNo broken requirements found.\n</code></pre></p> <p>The key thing to note is that we can access the command-line interface of oldmath with its numpy&lt;=1.26.4 requirement and have newmath installed with its numpy&gt;=2.0.0 requirement in the same environment without any dependency conflict .</p>"},{"location":"examples/#share-the-re-packaged-distribution-with-confidence","title":"Share the Re-packaged Distribution with Confidence","text":"<p>Sharing oldmath with colleagues and/or the general Python community would run a high risk of breaking a Python environment due to the outdated numpy requirement. However, we can share oldmathsrepkg, knowing that it will not cause problems a user's Python environment \u2014 even if they are using a current version of numpy and do not know much / anything about Python dependencies and environments.</p>"},{"location":"examples/#example-2-re-package-a-distribution-obtained-from-pypi","title":"Example #2: Re-package a Distribution Obtained from PyPI","text":"<p>We can re-package the latest version of scrape available on the PyPI using: <pre><code>srepkg scrape\n</code></pre> The output should look similar to: <pre><code>\u2705 Retrieving scrape from Python Packaging Index\n    Downloaded files:\n    \u2022 scrape-0.11.3-py3-none-any.whl\n\u2705 Creating virtual env\n    Virtual env created with the following pypa packages installed:\n    \u2022 pip==25.0.1\n    \u2022 setuptools==75.8.0\n    \u2022 wheel==0.45.1\n\u2705 Installing scrape-0.11.3-py3-none-any.whl in virtual env\n\u2705 Building srepkg wheel\n    scrapesrepkg wheel saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n\u2705 Building srepkg sdist\n    scrapesrepkg sdist saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\n\nscrapesrepkg can be installed using either of the following commands:\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\nUpon installation, scrapesrepkg will provide access to the following command line entry points: \n    \u2022 scrape\n</code></pre></p> <p>We can then install scrapesrepkg: <pre><code>pip install pip install srepkg_dists/scrapesrepkg-0.11.3-cp310-abi3-linux_x86_64.whl\n</code></pre> Output: <pre><code>Processing ./srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\nInstalling collected packages: scrapesrepkg\nSuccessfully installed scrapesrepkg-0.11.3\n</code></pre> Then we can use the <code>scrape</code> command on http://example.com/ <pre><code>scrape http://example.com/ -pt\n</code></pre> Output: <pre><code>Failed to enable cache: No module named 'requests_cache'\nExample Domain\nExample Domain\nThis domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.\nMore information...\n</code></pre></p> <p>If we wanted to re-package a specific version (e.g.<code>0.11.0</code>) from PyPI we could do this: <pre><code>srepkg scrape -r 0.11.0\n</code></pre></p>"},{"location":"examples/#example-3-re-package-a-distribution-obtained-from-github","title":"Example #3: Re-package a Distribution Obtained from GitHub","text":"<p>We can also re-package using a GitHub repo as the original source: <pre><code>srepkg https://github.com/huntrar/scrape\n</code></pre> Output: <pre><code>\u2705 Cloning https://github.com/huntrar/scrape into temporary directory\n\u2705 Building original package wheel from source code\n\u2705 Creating virtual env\n    Virtual env created with the following pypa packages installed:\n    \u2022 pip==25.0.1\n    \u2022 setuptools==75.8.0\n    \u2022 wheel==0.45.1\n\u2705 Installing scrape-0.11.3-py3-none-any.whl in virtual env\n\u2705 Building srepkg wheel\n    scrapesrepkg wheel saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n\u2705 Building srepkg sdist\n    scrapesrepkg sdist saved as: /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\n\nscrapesrepkg can be installed using either of the following commands:\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3-py3-none-any.whl\n    \u2022 pip install /home/duane/dproj/srepkg/srepkg_dists/scrapesrepkg-0.11.3.tar.gz\nUpon installation, scrapesrepkg will provide access to the following command line entry points: \n    \u2022 scrape\n</code></pre></p> <p>If we want to re-package a specific commit from the scrape GitHub repo, we can run: <pre><code>srepkg https://github.com/huntrar/scrape -g 1dfd98bb0a308ef2a45b1e5dd136c38b17c27bc7\n</code></pre> If we want to re-package a specific release or tag, we would run: <pre><code>srepkg https://github.com/huntrar/scrape -g 0.11.2 \n</code></pre></p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#requirements","title":"\ud83d\udccb Requirements","text":"<ul> <li>Python version 3.9 or higher</li> <li>For compatibility with srepkg, and existing package must:</li> <li>Be installable via pip</li> <li>Be compatible with the Python interpreter version that is running srepkg.</li> <li>Have command line entry point(s) specified in either one the <code>[project.scripts]</code> section of a <code>pyproject.toml</code> (preferred), the <code>[options.entry_points]</code> section of a  <code>setup.cfg</code>, or the <code>entry_points</code> arguments passed to <code>setup()</code> in a <code>setupy.py</code> file.</li> <li>Optional: <code>miniconda</code> or <code>conda</code> if you want to exactly follow the examples in the documentation.</li> </ul>"},{"location":"getting_started/#installing","title":"\ud83d\udce6 Installing","text":"<pre><code>pip install srepkg\n</code></pre>"},{"location":"getting_started/#command-line-help","title":"\u2753 Command Line Help","text":"<pre><code>srepkg --help\n</code></pre>"},{"location":"getting_started/#simple-demo-with-srepkg-in-a-fresh-conda-environment","title":"\u25b6\ufe0f Simple Demo with srepkg in a fresh conda environment","text":"<pre><code># Create and activate a new conda environment for testing\nconda create -n srepkg_test python=3.11\nconda activate srepkg_test\n\n# Install srepkg from PyPI\npip install srepkg\n\n# Re-package a version of black, obtained from PyPI\nsrepkg black -r 25.1.0  # creates re-package wheel and sdist under ./srepkg_dists\n\n# install our re-packaged wheel\npip install ./srepkg_dists/blacksrepkg-25.1.0-py3-none-any.whl\n\n# Confirm blacksrepkg is installed and that black is NOT installed in our conda env\nconda list | grep black\n# Output:\n# blacksrepkg               25.1.0                   pypi_0    pypi\n\n# Check if any of black's dependencies are installed in our conda environment\nonda list | grep \"click\\|\\\nmypy_extensions\\|\\\npackaging\\|\\\npathspec\\|\\\nplatformdirs\\|\\\ntomli\\|\\\ntyping_extensions\"\n\n# Output:\n# packaging                 24.2                     pypi_0    pypi\n\n# Note: 'packaging' is installed because it is a dependency of 'srepkg'.\n# No other package that black depends on is in our environment.\n\n# Confirm that we have access to the black CLI\nblack -c \"def foo():print('hello,world')\"\n# Output:\n# def foo():\n#    print(\"hello,world\")\n</code></pre>"}]}